"""–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext          # –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import app.states as st
import app.filters as flt

import app.database.requests.administrators as rq_adm
import app.database.requests.couriers as rq_cur
import app.database.requests.managers as rq_man

from app.database.requests.orders import get_first_courier_not_completed_order

import app.keyboards.admin.database_editing.administrators as kb_adm
import app.keyboards.admin.database_editing.couriers as kb_cur
import app.keyboards.admin.database_editing.managers as kb_man
import app.keyboards.admin.database_editing.common_user_keyboards as kb


common_edit_router = Router()
common_edit_router.message.filter(flt.CheckAdmin())
common_edit_router.callback_query.filter(flt.CheckAdmin())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
@common_edit_router.message(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë®‚öôÔ∏è')
async def user_edit_start(message: Message):
    await message.answer('–ë–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫–æ–π —Ä–æ–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?',
                         reply_markup=kb.edit_users_role_choosing)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@common_edit_router.message(st.CommonUserAddition.name)
async def name_input(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(st.CommonUserAddition.surname)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@common_edit_router.message(st.CommonUserAddition.surname)
async def surname_input(message: Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await state.set_state(st.CommonUserAddition.phone_number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@common_edit_router.message(st.CommonUserAddition.phone_number)
async def phone_number_input(message: Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await state.set_state(st.CommonUserAddition.tg_id)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ Telegram id')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ Telegram id
@common_edit_router.message(st.CommonUserAddition.tg_id, lambda message: message.text.isdigit())
async def tg_id_input(message: Message, state: FSMContext):
    await state.update_data(tg_id=int(message.text))
    data = await state.get_data()
    if data["role"] == 0:
        await rq_adm.add_admin(data["name"], data["surname"], data["phone_number"], data["tg_id"])
        await message.answer('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=await kb_adm.administrators())
    elif data["role"] == 1:
        await rq_cur.add_courier(data["name"], data["surname"], data["phone_number"], data["tg_id"])
        await message.answer('–ö—É—Ä—å–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=await kb_cur.couriers())
    elif data["role"] == 2:
        await rq_man.add_manager(data["name"], data["surname"], data["phone_number"], data["tg_id"],
                                 data["restaurant_id"])
        await message.answer('–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=await kb_man.managers(data["restaurant_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
@common_edit_router.callback_query(F.data.startswith('common_edit_'), st.CommonUserEditing.role)
async def data_editing(callback: CallbackQuery):
    await callback.answer('')
    user_id = int(callback.data.split('_')[2])
    await callback.message.answer('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? ü§î',
                                  reply_markup=await kb.common_edit_data_choosing(user_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"
@common_edit_router.callback_query(F.data.startswith('common_name_editing_'))
async def name_changing(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.CommonUserEditing.name)
    await state.update_data(user_id=int(callback.data.split('_')[3]))
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–Ω–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤)')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@common_edit_router.message(st.CommonUserEditing.name)
async def update_name(message: Message, state: FSMContext):
    data = await state.get_data()
    if data["role"] == 0:
        await rq_adm.change_name(data["user_id"], message.text)
        await message.answer('–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=await kb_adm.back_to_admin(data["user_id"]))
    elif data["role"] == 1:
        await rq_cur.change_name(data["user_id"], message.text)
        await message.answer('–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=await kb_cur.back_to_courier(data["user_id"]))
    elif data["role"] == 2:
        await rq_man.change_name(data["user_id"], message.text)
        await message.answer('–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=await kb_man.back_to_manager(data["user_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é"
@common_edit_router.callback_query(F.data.startswith('common_surname_editing_'))
async def surname_changing(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.CommonUserEditing.surname)
    await state.update_data(user_id=int(callback.data.split('_')[3]))
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é (–Ω–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤)')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@common_edit_router.message(st.CommonUserEditing.surname)
async def update_surname(message: Message, state: FSMContext):
    data = await state.get_data()
    if data["role"] == 0:
        await rq_adm.change_surname(data["user_id"], message.text)
        await message.answer('–§–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=await kb_adm.back_to_admin(data["user_id"]))
    elif data["role"] == 1:
        await rq_cur.change_surname(data["user_id"], message.text)
        await message.answer('–§–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=await kb_cur.back_to_courier(data["user_id"]))
    elif data["role"] == 2:
        await rq_man.change_surname(data["user_id"], message.text)
        await message.answer('–§–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=await kb_man.back_to_manager(data["user_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
@common_edit_router.callback_query(F.data.startswith('common_editing_number_'))
async def number_changing(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.CommonUserEditing.phone_number)
    await state.update_data(user_id=int(callback.data.split('_')[3]))
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@common_edit_router.message(st.CommonUserEditing.phone_number)
async def update_number(message: Message, state: FSMContext):
    data = await state.get_data()
    if data["role"] == 0:
        await rq_adm.change_number(data["user_id"], message.text)
        await message.answer('–ù–æ–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=await kb_adm.back_to_admin(data["user_id"]))
    elif data["role"] == 1:
        await rq_cur.change_number(data["user_id"], message.text)
        await message.answer('–ù–æ–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=await kb_cur.back_to_courier(data["user_id"]))
    elif data["role"] == 2:
        await rq_man.change_number(data["user_id"], message.text)
        await message.answer('–ù–æ–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=await kb_man.back_to_manager(data["user_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å Telegram id"
@common_edit_router.callback_query(F.data.startswith('common_tg_id_editing_'))
async def tg_id_changing(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.CommonUserEditing.tg_id)
    await state.update_data(user_id=int(callback.data.split('_')[4]))
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π id')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è Telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@common_edit_router.message(st.CommonUserEditing.tg_id, lambda message: message.text.isdigit())
async def update_tg_id(message: Message, state: FSMContext):
    data = await state.get_data()
    new_tg_id = int(message.text)
    if data["role"] == 0:
        await rq_adm.change_tg_id(data["user_id"], new_tg_id)
        await message.answer('Telegram id –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=await kb_adm.back_to_admin(data["user_id"]))
    elif data["role"] == 1:
        await rq_cur.change_tg_id(data["user_id"], new_tg_id)
        await message.answer('Telegram id –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=await kb_cur.back_to_courier(data["user_id"]))
    elif data["role"] == 2:
        await rq_man.change_tg_id(data["user_id"], new_tg_id)
        await message.answer('Telegram id –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=await kb_man.back_to_manager(data["user_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@common_edit_router.callback_query(F.data.startswith('common_delete_'), st.CommonUserEditing.role)
async def delete_user(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    user_id = int(callback.data.split('_')[2])
    if data["role"] == 0:
        await rq_adm.delete_admin(user_id)
        await callback.message.edit_text('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!', reply_markup=await kb_adm.administrators())
    elif data["role"] == 1:
        if not await get_first_courier_not_completed_order(user_id):
            await rq_cur.delete_courier(user_id)
            await callback.message.edit_text('–ö—É—Ä—å–µ—Ä —É–¥–∞–ª–µ–Ω!',
                                             reply_markup=await kb_cur.couriers())
        else:
            await callback.message.edit_text('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç '
                                             '–∑–∞–∫–∞–∑ ‚ùå', reply_markup=await kb_cur.couriers())
    elif data["role"] == 2:
        manager = await rq_man.get_manager_by_id(user_id)
        restaurant_id = manager.restaurant_id
        await rq_man.delete_manager(user_id)
        await callback.message.edit_text('–ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω!',
                                         reply_markup=await kb_man.managers(restaurant_id))
    await state.clear()
