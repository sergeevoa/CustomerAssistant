"""–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext          # –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import app.keyboards.admin.database_editing.restaurant_categories as kb
import app.keyboards.multi_role as kb_m
import app.states as st
import app.database.requests.restaurant_categories as rq
import app.database.requests.restaurants as rq_r
import app.filters as flt

res_cat_router = Router()      # router –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (Dispatcher) –≤–Ω–µ —Ñ–∞–π–ª–∞ —Å —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
res_cat_router.message.filter(flt.CheckAdmin())
res_cat_router.callback_query.filter(flt.CheckAdmin())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"
@res_cat_router.message(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ üèõ‚öôÔ∏è')
async def res_edit_start(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:', reply_markup=await kb.all_restaurant_categories())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"
@res_cat_router.callback_query(F.data == 'add_res_category')
async def add_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.CategoryEditing.add_name)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
@res_cat_router.message(st.CategoryEditing.add_name)
async def enter_category_name(message: Message, state: FSMContext):
    await rq.add_restaurant_category(message.text)
    await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=await kb.all_restaurant_categories())
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@res_cat_router.callback_query(F.data.startswith('adm_res_category_'))
async def category_menu(callback: CallbackQuery):
    await callback.answer('')
    category = await rq.get_restaurant_category(int(callback.data.split('_')[3]))
    await callback.message.edit_text(category.name, reply_markup=await kb.rest_cat_editing(category.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
@res_cat_router.callback_query(F.data.startswith('rc_edit_'))
async def edit_name(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.CategoryEditing.edit_name)
    await state.update_data(category_id=int(callback.data.split('_')[2]))
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùóÔ∏è')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
@res_cat_router.message(st.CategoryEditing.edit_name)
async def update_name(message: Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_name(data["category_id"], message.text)
    await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
    category = await rq.get_restaurant_category(data["category_id"])
    await message.answer(category.name, reply_markup=await kb.rest_cat_editing(category.id))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
@res_cat_router.callback_query(F.data.startswith('rc_delete_'))
async def delete_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    category_id = int(callback.data.split('_')[2])

    if not await rq_r.get_first_restaurant_from_category(category_id):    # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await rq.delete_category(category_id)
        await callback.message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
        await res_edit_start(callback.message)
    else:
        await state.set_state(st.CategoryEditing.delete)
        await state.update_data(category_id=category_id)
        await callback.message.answer('–í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è\n–í –±–∞–∑–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö, '
                                      '–æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± —ç—Ç–∏—Ö '
                                      '—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n–í—Å–µ —Ä–∞–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?',
                                      reply_markup=kb_m.yes_no)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞" –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
@res_cat_router.message(F.text == '–î–∞ ‚úÖ', st.CategoryEditing.delete)
async def delete_yes(message: Message, state: FSMContext):
    data = await state.get_data()
    await rq.delete_category(data["category_id"])
    await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
    await state.clear()
    await res_edit_start(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ—Ç" –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
@res_cat_router.message(F.text == '–ù–µ—Ç ‚ùå', st.CategoryEditing.delete)
async def delete_no(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ü¶â', reply_markup=await kb.back_to_rest_category(data["category_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@res_cat_router.callback_query(F.data == 'to_res_categories_editing')
async def back_to_rest_categories(callback: CallbackQuery):
    await callback.answer('')
    await res_edit_start(callback.message)
