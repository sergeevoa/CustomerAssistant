"""–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext          # –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import app.keyboards.admin.database_editing.restaurants as kb
import app.keyboards.multi_role as kb_m
import app.states as st
import app.database.requests.restaurant_categories as rq_c
import app.database.requests.addresses as rq_addr
import app.database.requests.restaurants as rq
import app.database.requests.meal_categories as rq_m_cat
import app.filters as flt

from app.keyboards.admin.database_editing.restaurant_categories import back_to_category_restaurants

rest_router = Router()
rest_router.message.filter(flt.CheckAdmin())
rest_router.callback_query.filter(flt.CheckAdmin())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
@rest_router.callback_query(F.data.startswith('restaurants_editing_'))
async def rest_edit_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.clear()
    category = await rq_c.get_restaurant_category(int(callback.data.split('_')[2]))
    await callback.message.answer(f'{category.name}: —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', reply_markup=await kb.restaurants(category.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
@rest_router.callback_query(F.data.startswith('add_restaurant_in_'))
async def restaurant_addition_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.RestaurantAddition.category_id)
    await state.update_data(category_id=int(callback.data.split('_')[3]), restaurant_id=None)
    await state.set_state(st.RestaurantAddition.name)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ üèõ')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@rest_router.message(st.RestaurantAddition.name)
async def name_input(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(st.RestaurantAddition.picture_link)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –∫–æ—Ç–æ—Ä–æ–µ —è –ø–æ–∫–∞–∂—É –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–∏ –µ–≥–æ –≤—ã–±–æ—Ä–µ üåå')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@rest_router.message(F.photo, st.RestaurantAddition.picture_link)
async def get_picture_link(message: Message, state: FSMContext):
    # –ò–Ω–¥–µ–∫—Å -1 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ—Ä—Å–∏—é —ç—Ç–æ–≥–æ —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
    await state.update_data(picture_link=message.photo[-1].file_id)
    await state.set_state(st.Address.district)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ üè° \n–ù–∞—á–Ω–µ–º —Å —Ä–∞–π–æ–Ω–∞')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@rest_router.message(st.RestaurantAddition.address)
async def rest_address_input(message: Message, state: FSMContext):
    await state.set_state(st.Address.district)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ üè° \n–ù–∞—á–Ω–µ–º —Å —Ä–∞–π–æ–Ω–∞')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤ –ë–î
async def rest_addition_end(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data["restaurant_id"]:
        rest_id = await rq.add_restaurant(data["name"], data["picture_link"], data["category_id"])
        await state.update_data(restaurant_id=rest_id)
        await message.answer('–†–µ—Å—Ç–æ—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ')
        await rest_addition_end(message, state)
    else:
        await rq_addr.set_address(data["district"], data["street"], data["home"], None, None,
                                  data["restaurant_id"], None)
        await message.answer('–ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å–∞–Ω üìù', reply_markup=await kb.add_rest_address(int(data["category_id"])))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å"
@rest_router.callback_query(F.data == 'another_address')
async def another_address(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.RestaurantAddition.address)
    await rest_address_input(callback.message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@rest_router.callback_query(F.data.startswith('adm_restaurant_'))
async def restaurant_editing(callback: CallbackQuery):
    await callback.answer('')
    restaurant = await rq.get_restaurant(int(callback.data.split('_')[2]))
    await callback.message.answer_photo(photo=restaurant.picture_link, caption=f'{restaurant.name}\n',
                                        reply_markup=await kb.restaurant_editing(restaurant))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
@rest_router.callback_query(F.data.startswith('restaurant_edit_'))
async def restaurant_data_changing(callback: CallbackQuery):
    await callback.answer('')
    restaurant_id = int(callback.data.split('_')[2])
    await callback.message.answer('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? ü§î',
                                  reply_markup=await kb.restaurant_edit_data_choosing(restaurant_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
@rest_router.callback_query(F.data.startswith('rest_name_editing_'))
async def edit_name(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.RestaurantEditing.name)
    await state.update_data(restaurant_id=int(callback.data.split('_')[3]))
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùóÔ∏è')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@rest_router.message(st.RestaurantEditing.name)
async def update_name(message: Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_restaurant_name(data["restaurant_id"], message.text)
    await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ü¶â', reply_markup=await kb.back_to_restaurant(data["restaurant_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"
@rest_router.callback_query(F.data.startswith('rest_photo_editing_'))
async def edit_photo(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.RestaurantEditing.picture_link)
    await state.update_data(restaurant_id=int(callback.data.split('_')[3]))
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ! üì∑')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@rest_router.message(F.photo, st.RestaurantEditing.picture_link)
async def update_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_restaurant_photo(data["restaurant_id"], message.photo[-1].file_id)
    await message.answer('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞! üì∑ü¶â', reply_markup=await kb.back_to_restaurant(data["restaurant_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
@rest_router.callback_query(F.data.startswith('change_category_'))
async def edit_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.RestaurantEditing.category)
    restaurant_id = int(callback.data.split('_')[2])
    await state.update_data(restaurant_id=restaurant_id)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω:',
                                     reply_markup=await kb.change_category(restaurant_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@rest_router.callback_query(F.data.startswith('new_restaurant_category_'), st.RestaurantEditing.category)
async def update_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    data = await state.get_data()
    new_rest_category_id = int(callback.data.split('_')[3])
    await rq.update_restaurant_category(data["restaurant_id"], new_rest_category_id)
    await callback.message.edit_text('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!',
                                     reply_markup=await kb.back_to_restaurant(data["restaurant_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@rest_router.callback_query(F.data.startswith('restaurant_delete_'))
async def delete_restaurant(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    restaurant_id = int(callback.data.split('_')[2])

    # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —ç—Ç–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
    if not await rq_m_cat.get_first_category_from_restaurant(restaurant_id):
        rest_category_id = await rq.delete_restaurant(restaurant_id)
        await callback.message.answer('–†–µ—Å—Ç–æ—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!',
                                      reply_markup=await back_to_category_restaurants(rest_category_id))
    else:
        await state.set_state(st.RestaurantEditing.delete)
        await state.update_data(restaurant_id=restaurant_id)
        await callback.message.answer('–í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è\n–í –±–∞–∑–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –±–ª—é–¥, '
                                      '–æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ —ç—Ç–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É.\n–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± —ç—Ç–∏—Ö '
                                      '–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –æ –±–ª—é–¥–∞—Ö, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –Ω–∏–º, —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.'
                                      '\n–í—Å–µ —Ä–∞–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω?',
                                      reply_markup=kb_m.yes_no)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞" –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥
@rest_router.message(F.text == '–î–∞ ‚úÖ', st.RestaurantEditing.delete)
async def delete_yes(message: Message, state: FSMContext):
    data = await state.get_data()
    rest_category_id = await rq.delete_restaurant(data["restaurant_id"])
    await message.answer('–†–µ—Å—Ç–æ—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', reply_markup=await back_to_category_restaurants(rest_category_id))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ—Ç" –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥
@rest_router.message(F.text == '–ù–µ—Ç ‚ùå', st.RestaurantEditing.delete)
async def delete_no(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ü¶â', reply_markup=await kb.back_to_restaurant(data["restaurant_id"]))
    await state.clear()
