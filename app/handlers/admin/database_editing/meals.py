"""–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–ª—é–¥"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext          # –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import app.keyboards.admin.database_editing.meals as kb
import app.states as st
import app.database.requests.meals as rq
import app.database.requests.meal_categories as rq_m_cat
import app.database.requests.ordered_meals as rq_ord_m
import app.filters as flt

from app.keyboards.admin.database_editing.meal_categories import back_to_category_meals

meal_router = Router()
meal_router.message.filter(flt.CheckAdmin())
meal_router.callback_query.filter(flt.CheckAdmin())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–ª—é–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
@meal_router.callback_query(F.data.startswith('meals_editing_'))
async def meal_edit_start(callback: CallbackQuery):
    await callback.answer('')
    category = await rq_m_cat.get_meal_category(int(callback.data.split('_')[2]))
    await callback.message.answer(f'–ë–ª—é–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.name}', reply_markup=await kb.meals(category.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ"
@meal_router.callback_query(F.data.startswith('add_meal_in_'))
async def meal_addition_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.MealAddition.category_id)
    await state.update_data(category_id=int(callback.data.split('_')[3]))
    await state.set_state(st.MealAddition.name)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ üçî')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
@meal_router.message(st.MealAddition.name)
async def name_input(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(st.MealAddition.picture_link)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ —è –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º! üçîüì∏')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@meal_router.message(F.photo, st.MealAddition.picture_link)
async def get_picture_link(message: Message, state: FSMContext):
    await state.update_data(picture_link=message.photo[-1].file_id)
    await state.set_state(st.MealAddition.compound)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∏–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç –±–ª—é–¥–æ üçãüçäü•¨')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–∞ –±–ª—é–¥–∞
@meal_router.message(st.MealAddition.compound)
async def compound_input(message: Message, state: FSMContext):
    await state.update_data(compound=message.text)
    await state.set_state(st.MealAddition.caloric_capacity)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞ 100–≥', reply_markup=kb.caloric_capacity_input_choice)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –±–ª—é–¥–∞
@meal_router.message(st.MealAddition.caloric_capacity, lambda message: message.text.isdigit())
async def caloric_capacity_input(message: Message, state: FSMContext):
    await state.update_data(caloric_capacity=float(message.text))
    await price_input_start(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –±–ª—é–¥–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –µ–µ –≤–≤–æ–¥–∏—Ç—å
@meal_router.message(st.MealAddition.caloric_capacity, F.text == '–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å')
async def no_caloric_capacity(message: Message, state: FSMContext):
    await state.update_data(caloric_capacity=None)
    await price_input_start(message, state)


# –§—É–Ω–∫—Ü–∏—è, –ø–æ–º–µ—â–∞—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –±–ª—é–¥–∞
async def price_input_start(message: Message, state: FSMContext):
    await state.set_state(st.MealAddition.price)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞ üíµ')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –±–ª—é–¥–∞
@meal_router.message(st.MealAddition.price, lambda message: message.text.isdigit())
async def price_input(message: Message, state: FSMContext):
    data = await state.get_data()
    category = await rq_m_cat.get_meal_category(data["category_id"])
    await rq.add_meal(data["name"], data["compound"], data["caloric_capacity"],
                      float(message.text), data["picture_link"], category.id, category.restaurant_id)
    await message.answer('–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ü¶â', reply_markup=await kb.meals(int(data["category_id"])))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –±–ª—é–¥–∞
@meal_router.callback_query(F.data.startswith('adm_meal_'))
async def meal_editing(callback: CallbackQuery):
    await callback.answer('')
    meal = await rq.get_meal(int(callback.data.split('_')[2]))
    if meal.caloric_capacity:
        await callback.message.answer_photo(photo=meal.picture_link, caption=f'{meal.name}\n\n–°–æ—Å—Ç–∞–≤: {meal.compound}\n'
                                                                             f'\n–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {meal.caloric_capacity} –∫–∫–∞–ª'
                                                                             f'\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {meal.price} RUB',
                                            reply_markup=await kb.meal_editing(meal))
    else:
        await callback.message.answer_photo(photo=meal.picture_link, caption=f'{meal.name}\n\n–°–æ—Å—Ç–∞–≤: {meal.compound}\n'
                                                                             f'\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {meal.price} RUB',
                                            reply_markup=await kb.meal_editing(meal))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
@meal_router.callback_query(F.data.startswith('adm_edit_'), F.data.endswith('_meal'))
async def meal_data_changing(callback: CallbackQuery):
    await callback.answer('')
    meal_id = int(callback.data.split('_')[2])
    # –ï—Å–ª–∏ —ç—Ç–æ –±–ª—é–¥–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
    if await rq_ord_m.is_this_meal_in_active_orders(meal_id):
        await callback.message.answer('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª—é–¥–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ! ‚ùå'
                                      '\n–î–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ —Å–µ–π—á–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.')
        await meal_editing(callback)
    else:
        await callback.message.answer('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? ü§î',
                                      reply_markup=await kb.meal_edit_data_choosing(meal_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
@meal_router.callback_query(F.data.startswith('name_editing_meal_'))
async def name_changing(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.MealEditing.name)
    await state.update_data(meal_id=int(callback.data.split('_')[3]))
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤ ‚ùóÔ∏è')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
@meal_router.message(st.MealEditing.name)
async def update_name(message: Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_meal_name(data["meal_id"], message.text)
    await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ü¶â', reply_markup=await kb.back_to_meal(data["meal_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"
@meal_router.callback_query(F.data.startswith('photo_editing_meal_'))
async def photo_changing(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.MealEditing.picture_link)
    await state.update_data(meal_id=int(callback.data.split('_')[3]))
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ! üì∑')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ –±–ª—é–¥–∞
@meal_router.message(F.photo, st.MealEditing.picture_link)
async def update_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_meal_photo(data["meal_id"], message.photo[-1].file_id)
    await message.answer('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞! üì∑ü¶â', reply_markup=await kb.back_to_meal(data["meal_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤"
@meal_router.callback_query(F.data.startswith('compound_editing_meal_'))
async def compound_changing(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.MealEditing.compound)
    await state.update_data(meal_id=int(callback.data.split('_')[3]))
    await callback.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞ üçãüçäü•¨')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –±–ª—é–¥–∞
@meal_router.message(st.MealEditing.compound)
async def update_compound(message: Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_meal_compound(data["meal_id"], message.text)
    await message.answer('–°–æ—Å—Ç–∞–≤ –æ–±–Ω–æ–≤–ª–µ–Ω! ü¶â', reply_markup=await kb.back_to_meal(data["meal_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å"
@meal_router.callback_query(F.data.startswith('caloric_capacity_editing_'))
async def caloric_capacity_changing(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.MealEditing.caloric_capacity)
    await state.update_data(meal_id=int(callback.data.split('_')[3]))
    await callback.message.edit_text('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ ‚öñÔ∏è')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
@meal_router.message(st.MealEditing.caloric_capacity, lambda message: message.text.isdigit())
async def update_caloric_capacity(message: Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_meal_caloric_capacity(data["meal_id"], int(message.text))
    await message.answer('–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ü¶â', reply_markup=await kb.back_to_meal(data["meal_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É"
@meal_router.callback_query(F.data.startswith('price_editing_meal_'))
async def price_changing(callback: CallbackQuery, state: FSMContext):
    await state.set_state(st.MealEditing.price)
    await state.update_data(meal_id=int(callback.data.split('_')[3]))
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É üíµ')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
@meal_router.message(st.MealEditing.price)
async def update_price(message: Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_meal_price(data["meal_id"], float(message.text))
    await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ü¶â', reply_markup=await kb.back_to_meal(data["meal_id"]))
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ"
@meal_router.callback_query(F.data.startswith('adm_delete_'), F.data.endswith('_meal'))
async def delete_meal(callback: CallbackQuery):
    await callback.answer('')
    meal_id = int(callback.data.split('_')[2])
    # –ï—Å–ª–∏ —ç—Ç–æ –±–ª—é–¥–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
    if await rq_ord_m.is_this_meal_in_active_orders(meal_id):
        await callback.message.answer('–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª—é–¥–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ! ‚ùå'
                                      '\n–î–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ —Å–µ–π—á–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.')
        await meal_editing(callback)
    else:
        meal_category_id = await rq.delete_meal(meal_id)
        await callback.message.answer('–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ! ü¶â',
                                      reply_markup=await back_to_category_meals(meal_category_id))
