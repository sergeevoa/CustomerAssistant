"""–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.context import FSMContext  # –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import app.keyboards.user.order_placing as kb
import app.keyboards.user.main_menu as kb_menu
import app.states as st
import app.filters as flt
import app.database.requests.restaurants as rq_res
import app.database.requests.meal_categories as rq_m_cat
import app.database.requests.meals as rq_m
import app.database.requests.ordered_meals as rq_ord_m
import app.database.requests.users as rq_usr
import app.database.requests.orders as rq_ord
import app.database.requests.order_collection_addresses as rq_ord_c_addr
import app.database.requests.couriers as rq_cur

maintenance = False     # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è –∑–∞–∫—Ä—ã—Ç –ª–∏ –±–æ—Ç –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

order_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É"
@order_router.message(F.text == '–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É ü•°')
async def restaurant_category_choosing(message: Message):
    global maintenance
    if maintenance is True:     # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–∫—Ä—ã—Ç –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        await message.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É üò¢\n'
                             '–ë–æ—Ç –∑–∞–∫—Ä—ã—Ç –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ‚öôÔ∏èüõ†')
    else:
        if not await rq_ord.get_current_order(message.from_user.id):  # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î
            await rq_ord.add_order(message.from_user.id)  # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–∫–∞–∑–∞
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ü•£', reply_markup=await kb.all_restaurant_categories())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@order_router.callback_query(F.data.startswith('res_category_'))
async def restaurant_choosing(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω üèõ',
                                  reply_markup=await kb.restaurants(int(callback.data.split('_')[2])))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@order_router.callback_query(F.data.startswith('restaurant_'))
async def meal_category_choosing(callback: CallbackQuery):
    await callback.answer('')
    restaurant = await rq_res.get_restaurant(int(callback.data.split('_')[1]))
    await callback.message.answer_photo(photo=restaurant.picture_link, caption=f'{restaurant.name}\n'
                                                                               f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥',
                                        reply_markup=await kb.meal_categories(restaurant.id, restaurant.category_id)
                                        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥–∞
@order_router.callback_query(F.data.startswith('meal_category_'))
async def meal_choosing(callback: CallbackQuery):
    await callback.answer('')
    meal_category = await rq_m_cat.get_meal_category(int(callback.data.split('_')[2]))
    await callback.message.edit_media(media=InputMediaPhoto(media=meal_category.picture_link,
                                                            caption=f'{meal_category.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ'),
                                      reply_markup=await kb.meals(meal_category.id, meal_category.restaurant_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –±–ª—é–¥–æ–º
@order_router.callback_query(F.data.startswith('meal_'))
async def meal_order(callback: CallbackQuery):
    await callback.answer('')
    meal = await rq_m.get_meal(int(callback.data.split('_')[1]))  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–ª—é–¥–∞ –ø–æ id
    price = round(meal.price, 2)
    if meal.caloric_capacity:
        await callback.message.edit_media(media=InputMediaPhoto(media=meal.picture_link,
                                                                caption=f'{meal.name}\n\n–°–æ—Å—Ç–∞–≤: {meal.compound}\n\n'
                                                                        f'–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {meal.caloric_capacity} –∫–∫–∞–ª\n'
                                                                        f'\n–¶–µ–Ω–∞: {price} RUB'),
                                          reply_markup=await kb.add_to_basket(meal.id, meal.category_id))
    else:
        await callback.message.edit_media(media=InputMediaPhoto(media=meal.picture_link,
                                                                caption=f'{meal.name}\n\n–°–æ—Å—Ç–∞–≤: {meal.compound}\n\n'
                                                                        f'–¶–µ–Ω–∞: {price}'),
                                          reply_markup=await kb.add_to_basket(meal.id, meal.category_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
@order_router.callback_query(F.data.startswith('add_meal_'))
async def add_to_basket(callback: CallbackQuery):
    await callback.answer('')
    order = await rq_ord.get_current_order(callback.from_user.id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    meal = await rq_m.get_meal(int(callback.data.split('_')[2]))  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
    await rq_ord_m.add_ordered_meal(meal.id, order.id)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –±–ª—é–¥
    await rq_ord.update_order_price(order.id, meal.price)  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    await callback.message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', reply_markup=kb.order_next_steps_1)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–æ—Ä–∑–∏–Ω–∞"
@order_router.message(F.text == '–ö–æ—Ä–∑–∏–Ω–∞ üß∫')
async def basket(message: Message):
    order = await rq_ord.get_current_order(message.from_user.id)
    price = round(order.price, 2)
    await message.answer(f'–í–æ—Ç –≤–∞—à –∑–∞–∫–∞–∑. –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {price}',
                         reply_markup=await kb.all_ordered_meals(order.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@order_router.callback_query(F.data.startswith('ordered_meal_'))
async def meal_in_basket(callback: CallbackQuery):
    await callback.answer('')
    meal = await rq_m.get_meal(int(callback.data.split('_')[2]))
    price = round(meal.price, 2)
    if meal.caloric_capacity:
        await callback.message.answer_photo(photo=meal.picture_link, caption=f'{meal.name}\n\n–°–æ—Å—Ç–∞–≤: {meal.compound}\n'
                                                                             f'\n–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {meal.caloric_capacity} –∫–∫–∞–ª'
                                                                             f'\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} RUB',
                                            reply_markup=await kb.meal_in_basket(meal.id))
    else:
        await callback.message.answer_photo(photo=meal.picture_link, caption=f'{meal.name}\n\n–°–æ—Å—Ç–∞–≤: {meal.compound}\n'
                                                                             f'\n–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {meal.caloric_capacity}'
                                                                             f'\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} RUB',
                                            reply_markup=await kb.meal_in_basket(meal.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@order_router.callback_query(F.data.startswith('delete_ordered_meal_'))
async def delete_ordered_meal(callback: CallbackQuery):
    await callback.answer('')
    order = await rq_ord.get_current_order(callback.from_user.id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–∫–∞–∑–∞
    meal = await rq_m.get_meal(int(callback.data.split('_')[3]))  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
    await rq_ord_m.delete_ordered_meal(order.id, meal.id)  # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
    await rq_ord.update_order_price(order.id, (-1 * meal.price))  # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
    await callback.message.answer('–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
@order_router.message(F.text.endswith('–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ üè°'))
async def choose_address(message: Message):
    user = await rq_usr.get_user(message.from_user.id)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:', reply_markup=await kb.all_addresses(user.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∞–¥—Ä–µ—Å–æ–º
@order_router.callback_query(F.data.startswith('user_address_'))
async def add_address(callback: CallbackQuery):
    await callback.answer('')
    await rq_ord.update_order_address(callback.from_user.id,
                                      int(callback.data.split('_')[2]))  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
    await callback.message.answer('–ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ', reply_markup=kb.order_next_steps_2)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å"
@order_router.callback_query(F.data == 'new_address')
async def new_address(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.Address.district)
    await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ üè° \n–ù–∞—á–Ω–µ–º —Å —Ä–∞–π–æ–Ω–∞')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ"
@order_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ üçî')
async def add_meal(message: Message):
    await restaurant_category_choosing(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
@order_router.message(F.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå')
async def delete_order(message: Message):
    order = await rq_ord.get_current_order(message.from_user.id)
    await rq_ord.delete_order(order.id)
    await message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω ü¶â', reply_markup=kb_menu.main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"
@order_router.message(F.text == '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üíµ')
async def payment(message: Message, bot: Bot, state: FSMContext):
    order = await rq_ord.get_current_order(message.from_user.id)
    ordered_meals = await rq_ord_m.get_all_ordered_meals(order.id)
    meals_names = ''
    for ordered_meal in ordered_meals:
        meal = await rq_m.get_meal(ordered_meal.meal_id)
        if meals_names != '':
            meals_names = meals_names + ', ' + meal.name
        else:
            meals_names = meals_names + meal.name
    await bot.send_invoice(                             # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å–¥–µ–ª–∞–≤—à–µ–º—É –∑–∞–∫–∞–∑
        chat_id=message.chat.id,                        # id —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—á–µ—Ç
        title=f"–ó–∞–∫–∞–∑ Moonkin's Food ‚Ññ {order.id}",
        description=meals_names,
        payload='Payment through a bot',                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        provider_token='381764678:TEST:87658',          # –¢–æ–∫–µ–Ω –Æ–ö–∞—Å—Å—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –Ω–µ–µ
        currency='rub',
        prices=[
            LabeledPrice(
                label='–ö –æ–ø–ª–∞—Ç–µ',
                # –¶–µ–Ω—ã –≤ LabeledPrice —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –º–æ–Ω–µ—Ç–∞—Ö —Å–∞–º–æ–≥–æ –º–µ–ª–∫–æ–≥–æ –Ω–æ–º–∏–Ω–∞–ª–∞, –ø–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ –¥–æ–º–Ω–æ–∂–∞—Ç—å –Ω–∞ 100
                amount=round(order.price, 2) * 100,
                # –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å—á–µ—Ç–∞ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –Ω–µ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç–∏—Ç—å,
                # –∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞
                start_parameter='nztcoder',
            )
        ],
        request_timeout=15
    )
    await state.set_state(st.Payment.payment)
    await state.update_data(order_id=order.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—ã—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–¥—É–∫—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
@order_router.pre_checkout_query(st.Payment.payment)
async def pre_checkout_query_handling(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@order_router.message(st.Payment.payment)
async def successful_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    await rq_ord.change_order_status(data["order_id"], 1)
    await message.answer(f'–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω ü•≥\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {data["order_id"]}', reply_markup=kb_menu.main_menu)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
@order_router.callback_query(F.data.startswith('to_res_categories'))
async def back_to_res_categories(callback: CallbackQuery):
    await callback.answer('–í—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ü•£', reply_markup=await kb.all_restaurant_categories())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥
@order_router.callback_query(F.data.startswith('to_restaurants'))
async def back_to_restaurants(callback: CallbackQuery):
    await callback.answer('–í—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    await restaurant_choosing(callback)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
@order_router.callback_query(F.data.endswith('_meal_category'))
async def back_to_meal_categories(callback: CallbackQuery):
    await callback.answer('–í—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥–∞')
    await meal_category_choosing(callback)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –±–ª—é–¥–∞
@order_router.callback_query(F.data.startswith('to_meals'))
async def back_to_meals(callback: CallbackQuery):
    await callback.answer('–í—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –±–ª—é–¥–∞')
    await meal_choosing(callback)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–ª—é–¥–∞ –≤ –ö–æ—Ä–∑–∏–Ω–µ
@order_router.callback_query(F.data.startswith('to_basket'))
async def back_to_basket(callback: CallbackQuery):
    await callback.answer('–í—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –≤ –ö–æ—Ä–∑–∏–Ω—É')
    order = await rq_ord.get_current_order(callback.from_user.id)
    price = round(order.price, 2)
    await callback.message.answer(f'–í–æ—Ç –≤–∞—à –∑–∞–∫–∞–∑. –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {price}',
                                  reply_markup=await kb.all_ordered_meals(order.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@order_router.message(F.text == '–ó–∞–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ‚ö†Ô∏è', flt.CheckAdmin())
async def close_bot_for_maintenance(message: Message):
    global maintenance
    if maintenance is False:
        maintenance = True
        await message.answer('‚ö†Ô∏è –ë–æ—Ç –∑–∞–∫—Ä—ã—Ç –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ‚ö†Ô∏è\n–ö–ª–∏–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É—Ç –æ—Ñ–æ—Ä–º–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã')
    else:
        await message.answer('–ë–æ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ ‚ùå')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@order_router.message(F.text == '–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ ‚úÖ', flt.CheckAdmin())
async def close_bot_for_maintenance(message: Message):
    global maintenance
    if maintenance is True:
        maintenance = False
        await message.answer('ü•≥ –ë–æ—Ç –æ—Ç–∫—Ä—ã—Ç ü•≥\n–ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Å–Ω–æ–≤–∞ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã ‚úÖ')
    else:
        await message.answer('–ë–æ—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ ‚úÖ')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç –∫—É—Ä—å–µ—Ä–∞
@order_router.callback_query(F.data.startswith('delivery_approve_'))
async def delivery_approve(callback: CallbackQuery, bot: Bot):
    await callback.answer('–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', reply_markup=kb_menu.main_menu)
    order_id = int(callback.data.split('_')[2])
    courier_id = int(callback.data.split('_')[3])
    rating = 2
    await rq_ord.change_order_status(order_id, 4)        # –û—Ç–º–µ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º
    order_collection_addresses = await rq_ord_c_addr.get_order_collection_addresses(order_id)
    bonus_rating = len(list(order_collection_addresses))    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤ –∑–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    final_rating = rating + bonus_rating
    await rq_cur.change_rating(courier_id, final_rating)    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫—É—Ä—å–µ—Ä–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    courier = await rq_cur.get_courier_by_id(courier_id)
    await bot.send_message(chat_id=courier.tg_id, text=f'–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {final_rating}')
