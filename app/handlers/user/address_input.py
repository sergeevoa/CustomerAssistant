"""–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, callback-–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext  # –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import app.keyboards.user.order_placing as kb
import app.keyboards.multi_role as kb_m
import app.states as st
import app.filters as flt
import app.database.requests.addresses as rq_addr
import app.database.requests.users as rq_usr
import app.database.requests.administrators as rq_adm

from app.handlers.admin.database_editing.restaurants import rest_addition_end

address_router = Router()  # router –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (Dispatcher) –≤–Ω–µ —Ñ–∞–π–ª–∞ —Å —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

is_in_order = False  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–∏ –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–π–æ–Ω–∞
@address_router.message(st.Address.district)
async def district_input(message: Message, state: FSMContext):
    await state.update_data(district=message.text)
    await state.set_state(st.Address.street)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ —É–ª–∏—Ü—ã
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —É–ª–∏—Ü—ã')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —É–ª–∏—Ü—ã
@address_router.message(st.Address.street)
async def street_input(message: Message, state: FSMContext):
    await state.update_data(street=message.text)
    await state.set_state(st.Address.home)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –¥–æ–º–∞
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞
@address_router.message(st.Address.home)
async def home_input(message: Message, state: FSMContext):
    await state.update_data(home=message.text)
    # –ï—Å–ª–∏ –≤–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–∞–∑–µ
    if flt.CheckAdmin() and await rq_adm.get_admin_status(message.from_user.id):
        await rest_addition_end(message, state)                 # –ó–Ω–∞—á–∏—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–≤–æ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    else:
        await state.set_state(st.Address.is_it_all)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        await message.answer('–≠—Ç–æ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –¥–æ–º?', reply_markup=kb_m.yes_no)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ "–ù–µ—Ç"
@address_router.message(st.Address.is_it_all, F.text == '–ù–µ—Ç ‚ùå')
async def add_address_1(message: Message, state: FSMContext):
    await state.update_data(entrance=None, apartment=None)
    await address_end(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ "–î–∞"
@address_router.message(F.text == '–î–∞ ‚úÖ', st.Address.is_it_all)
async def add_entrance(message: Message, state: FSMContext):
    await state.set_state(st.Address.entrance)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–¥—ä–µ–∑–¥–∞
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—ä–µ–∑–¥')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–¥—ä–µ–∑–¥–∞
@address_router.message(st.Address.entrance, lambda message: message.text.isdigit())
async def add_entrance(message: Message, state: FSMContext):
    await state.update_data(entrance=int(message.text))
    await state.set_state(st.Address.apartment)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
@address_router.message(st.Address.apartment, lambda message: message.text.isdigit())
async def add_apartment(message: Message, state: FSMContext):
    await state.update_data(apartment=int(message.text))
    await address_end(message, state)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∞–¥—Ä–µ—Å–∞ –≤ –ë–î
async def address_end(message: Message, state: FSMContext):
    data = await state.get_data()
    user = await rq_usr.get_user(
        message.from_user.id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤–ø–∏—Å–∞—Ç—å –µ–≥–æ –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    await rq_addr.set_address(data["district"], data["street"], data["home"], data["entrance"], data["apartment"],
                              None, user.id)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
    await message.answer('–ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å–∞–Ω üìù', reply_markup=await kb.all_addresses(user.id))
    await state.clear()
