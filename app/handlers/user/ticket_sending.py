"""–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, callback-–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ—Ö–Ω–æ–¥–¥–µ—Ä–∂–∫—É"""

from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext          # –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import app.database.requests.tickets as rq_tick
import app.database.requests.orders as rq_ord
import app.database.requests.couriers as rq_cur
import app.keyboards.user.ticket_sending as kb
import app.keyboards.user.main_menu as kb_m
import app.states as st


ticket_router = Router()  # router –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (Dispatcher) –≤–Ω–µ —Ñ–∞–π–ª–∞ —Å —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é "–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"
@ticket_router.message(F.text == '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ ‚ö†Ô∏è')
async def problems_menu(message: Message):
    await message.answer('–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ–¥–Ω–∞ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–æ–±–ª–µ–º, –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–µ –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º '
                         'ü¶â\n–ï—Å–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –Ω–∞—à—É '
                         '—Ç–µ—Ö–ø–æ–¥–¥–µ–∂–∫—É', reply_markup=kb.common_problems)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ –º–æ–π –∑–∞–∫–∞–∑"
@ticket_router.callback_query(F.data == 'wrong_order')
async def wrong_order_id_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.WrongOrder.order_id)
    await callback.message.answer('–ü—Ä–∏–Ω–æ—à—É –≥–ª—É–±–æ—á–∞–π—à–∏–µ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ —Ç–∞–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é!\n'
                                  '–Ø –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ—Å–ª–∞–Ω–∏–µ —Å–≤–æ–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, '
                                  '–æ–Ω–∏ —Ä–∞–∑–±–µ—Ä—É—Ç—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Ç –≤–∞–º –¥–µ–Ω—å–≥–∏.\n'
                                  '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ id –ø–µ—Ä–µ–ø—É—Ç–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
@ticket_router.message(st.WrongOrder.order_id, lambda message: message.text.isdigit())
async def wrong_order_id_getting(message: Message, state: FSMContext):
    order_id = int(message.text)
    if await rq_ord.get_completed_order(order_id):
        await state.update_data(order_id=order_id)
        await state.set_state(st.WrongOrder.order_photo)
        await message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—à–µ–ª:')
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö!', reply_markup=kb_m.main_menu)
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–ø—É—Ç–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
@ticket_router.message(st.WrongOrder.order_photo, F.photo)
async def wrong_order_photo_getting(message: Message, state: FSMContext):
    data = await state.get_data()
    picture_link = message.photo[-1].file_id
    text = (f'–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–µ—Ä–µ–ø—É—Ç–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑. –ü—Ä–æ—Å—å–±–∞ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ñ–æ—Ç–æ —Å –∑–∞–∫–∞–∑–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–µ—Ä–Ω—É—Ç—å '
            f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ–Ω—å–≥–∏ –≤ —Å–ª—É—á–∞–µ –ø—Ä–∞–≤–¥–∏–≤–æ—Å—Ç–∏ –µ–≥–æ —Å–ª–æ–≤.\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {data["order_id"]}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ:\n'
            f'{picture_link}')
    await rq_tick.add_ticket(text, message.from_user.id)
    await message.answer('–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º! –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –∂–¥–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è ‚è≥')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É—Ä—å–µ—Ä –∑–∞–±–ª—É–¥–∏–ª—Å—è"
@ticket_router.callback_query(F.data == 'lost_courier')
async def lost_courier_incident_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.set_state(st.LostCourier.order_id)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ id –∑–∞–∫–∞–∑–∞ –∏ —è –¥–∞–º –≤–∞–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫—É—Ä—å–µ—Ä–∞:')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ id –ø—Ä–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ —Å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–º –∫—É—Ä—å–µ—Ä–æ–º
@ticket_router.message(st.LostCourier.order_id, lambda message: message.text.isdigit())
async def wrong_order_id_getting(message: Message, state: FSMContext):
    order_id = int(message.text)
    order = await rq_ord.get_delivering_order(order_id)
    if order:
        courier = await rq_cur.get_courier_by_id(order.courier_id)
        await message.answer(f'–ò–º—è –∫—É—Ä—å–µ—Ä–∞: {courier.surname} {courier.name}\n'
                             f'–¢–µ–ª–µ—Ñ–æ–Ω –∫—É—Ä—å–µ—Ä–∞: {courier.phone_number}\n'
                             f'–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä—å–µ—Ä—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å:',
                             reply_markup=await kb.text_to_courier(courier.id))
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!', reply_markup=kb_m.main_menu)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä—å–µ—Ä—É"
@ticket_router.callback_query(F.data.startswith('text_courier_'))
async def text_courier_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
    await state.set_state(st.LostCourier.text_courier)
    await state.update_data(courier_id=int(callback.data.split('_')[2]))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–±–ª—É–¥–∏–≤—à–µ–º—É—Å—è –∫—É—Ä—å–µ—Ä—É
@ticket_router.message(st.LostCourier.text_courier)
async def text_courier_end(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    courier = await rq_cur.get_courier_by_id(data["courier_id"])
    await bot.send_message(chat_id=courier.tg_id, text=message.text)
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=kb_m.main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞"
@ticket_router.callback_query(F.data.startswith('angry_courier'))
async def angry_courier_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∞–º –Ω–∞—Ö–∞–º–∏–ª –∫—É—Ä—å–µ—Ä', show_alert=True)
    await state.set_state(st.AngryCourier.order_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ id –Ω–µ—Ä–∞–¥–∏–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
@ticket_router.message(st.AngryCourier.order_id, lambda message: message.text.isdigit())
async def angry_courier_punishment(message: Message, state: FSMContext):
    order_id = int(message.text)
    order = await rq_ord.get_completed_order(order_id)
    if order:
        angry_courier = await rq_cur.get_courier_by_id(order.courier_id)
        await rq_cur.change_rating(angry_courier.id, -10)
        await message.answer('–†–µ–π—Ç–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞, –¥–æ—Å—Ç–∞–≤–ª—è–≤—à–µ–≥–æ –≤–∞—à –∑–∞–∫–∞–∑, —Å–Ω–∏–∂–µ–Ω, '
                             '—á—Ç–æ –Ω–∞–ø—Ä—è–º—É—é —Å–∫–∞–∂–µ—Ç—Å—è –Ω–∞ –µ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–µ! ü•≥', reply_markup=kb_m.main_menu)
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö!')
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
@ticket_router.callback_query(F.data == 'new_ticket')
async def ticket_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', show_alert=True)
    await state.set_state(st.TicketWriting.text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ
@ticket_router.message(st.TicketWriting.text)
async def ticket_writing(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    await rq_tick.add_ticket(data["text"], message.from_user.id)
    await message.answer('–í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞... ‚è≥', reply_markup=kb_m.main_menu)
    await state.clear()
