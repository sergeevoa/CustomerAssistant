"""–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

from aiogram import F, Router
from aiogram.types import Message

import app.database.requests.ordered_meals as rq_ord_m
import app.database.requests.orders as rq_ord
import app.database.requests.users as rq_usr
import app.database.requests.meals as rq_m

order_checkout_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
@order_checkout_router.message(F.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìù')
async def show_orders(message: Message):
    customer = await rq_usr.get_user(message.from_user.id)
    orders = await rq_ord.get_all_customer_not_completed_orders(customer.id)

    printable_status = '–ù–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω'
    for order in orders:
        if order.status == 1:
            printable_status = '–û—Ñ–æ—Ä–º–ª–µ–Ω'
        elif order.status == 2:
            printable_status = '–ì–æ—Ç–æ–≤–∏—Ç—Å—è'
        elif order.status == 3:
            printable_status = '–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è'

        ordered_meals = await rq_ord_m.get_all_ordered_meals(order.id)
        meal_names = ''
        for ordered_meal in ordered_meals:
            meal = await rq_m.get_meal(ordered_meal.meal_id)
            meal_names = meal_names + '\n' + meal.name

        await message.answer(f'–ó–∞–∫–∞–∑ ‚Ññ {order.id}\n\n'
                             f'–°—Ç–∞—Ç—É—Å: {printable_status}\n\n'
                             f'–°–æ–¥–µ—Ä–∂–∏—Ç:{meal_names}\n\n'
                             f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(order.price, 2)}')
