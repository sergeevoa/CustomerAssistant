"""–ó–¥–µ—Å—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import app.keyboards.manager as kb
import app.database.requests.managers as rq
import app.database.requests.restaurants as rq_r
import app.database.requests.orders as rq_ord
import app.database.requests.ordered_meals as rq_ord_m
import app.database.requests.meals as rq_m
import app.database.requests.order_collection_addresses as rq_ord_c
import app.filters as flt
import app.states as st

manager_router = Router()
manager_router.message.filter(flt.CheckManager())
manager_router.callback_query.filter(flt.CheckManager())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
@manager_router.message(Command('manager_start'))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    manager = await rq.get_manager(message.from_user.id)
    restaurant = await rq_r.get_restaurant(manager.restaurant_id)
    await state.set_state(st.ManagerWork.restaurant_id)
    await state.update_data(restaurant_id=restaurant.id)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–µ–Ω–µ–¥–∂–µ—Ä {manager.name} {manager.surname} –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ {restaurant.name}!',
                         reply_markup=kb.man_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"
@manager_router.message(F.text == '–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ üîç', st.ManagerWork.restaurant_id)
async def show_orders(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer('–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ üìù',
                         reply_markup=await kb.all_orders_with_this_restaurant_meals(data["restaurant_id"]))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–∫–∞–∑–∞
@manager_router.callback_query(F.data.startswith('man_order_'), st.ManagerWork.restaurant_id)
async def order_check(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    data = await state.get_data()
    printable_meal_names = ''
    order_id = int(callback.data.split('_')[2])
    ordered_meals = await rq_ord_m.get_all_ordered_meals(order_id)
    for ordered_meal in ordered_meals:
        meal = await rq_m.get_meal(ordered_meal.meal_id)
        if meal.restaurant_id == data["restaurant_id"]:
            printable_meal_names = printable_meal_names + meal.name + ' x1\n'
    await callback.message.answer(f'–ó–∞–∫–∞–∑ ‚Ññ {order_id}, –±–ª—é–¥–∞:\n{printable_meal_names}',
                                  reply_markup=await kb.order_taking(order_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –≥–æ—Ç–æ–≤–∫–∏"
@manager_router.callback_query(F.data.startswith('man_address_choosing_'), st.ManagerWork.restaurant_id)
async def make_order_cooking(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    data = await state.get_data()
    order_id = int(callback.data.split('_')[3])
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω —ç—Ç–æ—Ç –∑–∞–∫–∞–∑',
                                  reply_markup=await kb.man_address_choosing(data["restaurant_id"], order_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–¥—Ä–µ—Å–∞ –≥–æ—Ç–æ–≤–∫–∏
@manager_router.callback_query(F.data.startswith('set_order_address_'),  st.ManagerWork.restaurant_id)
async def place_order_collection_address(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    order_id = int(callback.data.split('_')[3])
    address_id = int(callback.data.split('_')[4])
    await rq_ord_c.add_order_collection_address(order_id, address_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–ª—è –≤—Å–µ—Ö –ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –∑–∞–∫–∞–∑–µ —É–∫–∞–∑–∞–Ω—ã –∞–¥—Ä–µ—Å–∞:
    unique_restaurant_ids = []                                    # –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö id —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –±–ª—é–¥
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è, —É–Ω–∏–∫–∞–ª–µ–Ω –ª–∏ —ç—Ç–æ—Ç restaurant_id —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ meal
    is_unique = True
    ordered_meals = await rq_ord_m.get_all_ordered_meals(order_id)
    for ordered_meal in ordered_meals:
        meal = await rq_m.get_meal(ordered_meal.meal_id)
        for restaurant_id in unique_restaurant_ids:                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ id —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, —É–∂–µ –Ω–∞—Ö–æ–¥—è—â–µ–≥–æ—Å—è –≤ —Å–ø–∏—Å–∫–µ
            if restaurant_id == meal.restaurant_id:                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ–≥–æ —Å id —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —ç—Ç–æ–≥–æ –±–ª—é–¥–∞
                is_unique = False
                break
        if is_unique:
            unique_restaurant_ids.append(meal.restaurant_id)        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫

    order_collection_addresses = await rq_ord_c.get_order_collection_addresses(order_id)
    # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ —Ä–∞–≤–Ω–∞ –¥–ª–∏–Ω–µ —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö id —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤,
    # –∑–Ω–∞—á–∏—Ç –∞–¥—Ä–µ—Å–∞ —Å–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –±–ª—é–¥ –∏–∑ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —É–∂–µ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if len(list(order_collection_addresses)) == len(unique_restaurant_ids):
        await rq_ord.change_order_status(order_id, 2)       # –ò –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑—É —Å—Ç–∞—Ç—É—Å "–≥–æ—Ç–æ–≤–∏—Ç—Å—è"

    await callback.message.answer('–ê–¥—Ä–µ—Å –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ')
    await show_orders(callback.message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–∫–∞–∑–∞
@manager_router.callback_query(F.data.startswith('to_order_list'), st.ManagerWork.restaurant_id)
async def back_to_order_list(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
    await show_orders(callback.message, state)
