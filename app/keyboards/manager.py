"""–ó–¥–µ—Å—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ c —Ä–æ–ª—å—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""

from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import app.database.requests.orders as rq_ord
import app.database.requests.ordered_meals as rq_ord_m
import app.database.requests.meals as rq_m
import app.database.requests.addresses as rq_addr
import app.database.requests.order_collection_addresses as rq_ord_c_addr

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
man_menu = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ üîç')]], resize_keyboard=True)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –±–ª—é–¥–∞ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
async def all_orders_with_this_restaurant_meals(restaurant_id):
    needed_order_list = []                                      # –°—é–¥–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∑–∞–∫–∞–∑—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—é
    keyboard = InlineKeyboardBuilder()
    addresses = await rq_addr.get_restaurant_addresses(restaurant_id)
    all_placed_orders = await rq_ord.get_all_placed_orders()

    for placed_order in all_placed_orders:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–¥—Ä–µ—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–ª—é–¥ —ç—Ç–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
        address_is_not_chosen = True
        for address in addresses:
            # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ —É–∫–∞–∑–∞–Ω –æ–¥–∏–Ω –∏–∑ –∞–¥—Ä–µ—Å–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            if await rq_ord_c_addr.get_this_restaurant_order_collection_address(address.id, placed_order.id):
                # –ó–Ω–∞—á–∏—Ç –∞–¥—Ä–µ—Å –µ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —ç—Ç–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                address_is_not_chosen = False
                break

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –¥–ª—è –Ω–µ–≥–æ –µ—â–µ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω
        if address_is_not_chosen:
            ordered_meals = await rq_ord_m.get_all_ordered_meals(placed_order.id)
            for ordered_meal in ordered_meals:
                meal = await rq_m.get_meal(ordered_meal.meal_id)
                if meal.restaurant_id == restaurant_id:
                    needed_order_list.append(placed_order)
                    break

    for order in needed_order_list:
        keyboard.add(InlineKeyboardButton(text=f'–ó–∞–∫–∞–∑ ‚Ññ {order.id}', callback_data=f'man_order_{order.id}'))
    return keyboard.adjust(2).as_markup()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
async def order_taking(order_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                                     [InlineKeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –≥–æ—Ç–æ–≤–∫–∏ üî•',
                                                                           callback_data=f'man_address_choosing_{order_id}')],
                                                     [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô',
                                                                           callback_data='to_order_list')]])
    return keyboard


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∞–¥—Ä–µ—Å–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –≥–¥–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
async def man_address_choosing(restaurant_id, order_id):
    keyboard = InlineKeyboardBuilder()
    restaurant_addresses = await rq_addr.get_restaurant_addresses(restaurant_id)
    for address in restaurant_addresses:
        keyboard.add(InlineKeyboardButton(text=f'{address.district} —Ä-–Ω, —É–ª. {address.street} –¥. {address.home}',
                                          callback_data=f'set_order_address_{order_id}_{address.id}'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô', callback_data=f'man_order_{order_id}'))
    return keyboard.adjust(1).as_markup()
