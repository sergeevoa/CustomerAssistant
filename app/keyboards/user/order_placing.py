"""–ó–¥–µ—Å—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton

import app.database.requests.restaurant_categories as rq_res_cat
import app.database.requests.restaurants as rq_res
import app.database.requests.meal_categories as rq_m_cat
import app.database.requests.meals as rq_m
import app.database.requests.ordered_meals as rq_ord_m
import app.database.requests.addresses as rq_addr

# Builder - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä. –ü–æ–ª–µ–∑–µ–Ω –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
from aiogram.utils.keyboard import InlineKeyboardBuilder


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
async def all_restaurant_categories():
    categories = await rq_res_cat.get_restaurant_categories()
    keyboard = InlineKeyboardBuilder()
    for category in categories:
        keyboard.add(InlineKeyboardButton(text=category.name, callback_data=f'res_category_{category.id}'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô', callback_data='to_main'))
    return keyboard.adjust(1).as_markup()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
async def restaurants(category_id):
    all_restaurants = await rq_res.get_category_restaurants(category_id)
    keyboard = InlineKeyboardBuilder()
    for restaurant in all_restaurants:
        keyboard.add(InlineKeyboardButton(text=restaurant.name, callback_data=f'restaurant_{restaurant.id}'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô', callback_data='to_res_categories'))
    return keyboard.adjust(1).as_markup()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
async def meal_categories(restaurant_id, res_category_id):
    categories = await rq_m_cat.get_meal_categories(restaurant_id)
    keyboard = InlineKeyboardBuilder()
    for category in categories:
        keyboard.add(InlineKeyboardButton(text=category.name, callback_data=f'meal_category_{category.id}'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô', callback_data=f'to_restaurants_{res_category_id}'))
    return keyboard.adjust(1).as_markup()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –±–ª—é–¥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def meals(meal_category_id, restaurant_id):
    all_meals = await rq_m.get_meals(meal_category_id)
    keyboard = InlineKeyboardBuilder()
    for meal in all_meals:
        keyboard.add(InlineKeyboardButton(text=meal.name, callback_data=f'meal_{meal.id}'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô', callback_data=f'to_{restaurant_id}_meal_category'))
    return keyboard.adjust(2).as_markup()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def add_to_basket(meal_id, meal_category_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üß∫', callback_data=f'add_meal_{meal_id}')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô', callback_data=f'to_meals_{meal_category_id}')]])
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
order_next_steps_1 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üß∫')],
                                                   [KeyboardButton(text='–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ üè°')],
                                                   [KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ üçî')],
                                                   [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå')]], resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
order_next_steps_2 = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üß∫')],
                                                   [KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ üè°')],
                                                   [KeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üíµ')],
                                                   [KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ üçî')],
                                                   [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå')]], resize_keyboard=True)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
async def meal_in_basket(meal_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üîô', callback_data='to_basket')],
        [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å ‚ùå', callback_data=f'delete_ordered_meal_{meal_id}')]])
    return keyboard


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def all_ordered_meals(order_id):
    all_customer_meals = await rq_ord_m.get_all_ordered_meals(order_id)
    keyboard = InlineKeyboardBuilder()
    for customer_meal in all_customer_meals:
        meal = await rq_m.get_meal(customer_meal.meal_id)
        keyboard.add(InlineKeyboardButton(text=meal.name, callback_data=f'ordered_meal_{meal.id}'))
    return keyboard.adjust(3).as_markup()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def all_addresses(user_id):
    all_user_addresses = await rq_addr.get_user_addresses(user_id)
    keyboard = InlineKeyboardBuilder()
    for address in all_user_addresses:
        if address.entrance and address.apartment:
            keyboard.add(InlineKeyboardButton(text=f'{address.district} —Ä-–Ω, —É–ª. {address.street}, –¥. {address.home}, '
                                                   f'–ø–æ–¥—ä–µ–∑–¥ {address.entrance}, –∫–≤. {address.apartment}',
                                              callback_data=f'user_address_{address.id}'))
        else:
            keyboard.add(InlineKeyboardButton(text=f'{address.district} —Ä-–Ω, —É–ª. {address.street}, –¥. {address.home}',
                                              callback_data=f'user_address_{address.id}'))
    keyboard.add(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å', callback_data='new_address'))
    return keyboard.adjust(1).as_markup()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
async def deliver_approve(order_id, courier_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É', callback_data=f'delivery_approve_{order_id}_{courier_id}')]])
    return keyboard
